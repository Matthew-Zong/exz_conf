""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" start pathogen 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call pathogen#runtime_append_all_bundles() 



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" original
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" deffexpr
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set diffexpr=MyDiff()

if (has("gui_running"))
    " 图形界面下不折叠代码
    set nowrap
    set guioptions+=b
else
    " vim下折叠代码，配色选为ron
    set wrap
    colo ron
endif


function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM userinterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
filetype plugin on
filetype indent on

set nocompatible
set nowrap
set nobackup
set noswapfile
set number
set wildmenu "自动补全命令时候使用菜单式匹配列表
set showcmd "显示命令
set foldmethod=marker
 

" 缩进
set shiftwidth=4
set tabstop=4
set expandtab
set softtabstop=4
set autoindent

" 断行
set lbr       "不在单词中间断行
set fo+=mB    "打开断行模块对亚洲语言支持

" color
"color molokai
color eclipse

" Search
set ignorecase smartcase
"set smartcase
set incsearch
set hlsearch


"Set backspace
set backspace=eol,start,indent
 
" 编码
"set fileencodings=utf-8,gbk,ucs-bom,cp936
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

set langmenu=zh_CN.UTF-8
language messages C
set helplang=cn
if has("win32")
    set encoding=chinese
    set fileencoding=chinese
endif


"Set 1 lines to the curors - when moving vertical..
set so=1
 
"Turn on WiLd menu
set wildmenu
 
"Always show current position
set ruler
 
"The commandbar is 2 high
set cmdheight=1
 
"Show line number
set nu
 
"Do not redraw, when running macros.. lazyredraw
set lz
 
"Change buffer - without saving
set hid
 
 
"Bbackspace and cursor keys wrap to
set whichwrap+=<,>,h,l
 
"Ignore case when searching
set ignorecase
set incsearch
 
"Set magic on
set magic
 
"No sound on errors.
set noerrorbells
set novisualbell
set t_vb=
 
"show matching bracets
set showmatch
 
"How many tenths of a second to blink
set mat=2
 
"Highlight search things
set hlsearch
 
" Set to auto read when a file is changed from the outside
set autoread
 
""""""""""""""""""""""""""""""
" maps
""""""""""""""""""""""""""""""
" fix insert mode Ctrl+X and BackSpace problem
map <C-X> <S-Del>i
map <BS> d

" gvimrc autoload
if has("win32")
        map <C-F12> :e $VIM/_gvimrc<Return>
    elseif has("unix")
        map <C-F12> :e ~/.gvimrc<Return>
endif

map <Return> :
map Q :q<Return>
map <C-s> :w<Return>

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" switch buffers with Tab
map <C-Tab> :bn<CR>
map <S-Tab> :bp<CR>

" window resizing
map <F11> 0:vertical resize 70<Return>
map <S-F11> :vertical resize 30<Return>
map <C-w><C-d> <C-w>_

map <F12> :NERDTree<Return>
map <F4> :A<Return>

""""""""""""""""""""""""""""""
" autocmd
""""""""""""""""""""""""""""""
autocmd FileType python map <F9> :!python "%"<Return>
autocmd FileType perl map <F9> :!perl -w "%"<Return>
" erlang cmd type
autocmd FileType erlang map <F10> :!erlc "%"<Return>
if has("win32")
    autocmd FileType erlang map <F9> :!escript.exe "%"<Return>
else
    autocmd FileType erlang map <F9> :!"%"<Return>
endif

autocmd FileType lua map <F9> :!lua "%"<Return>
autocmd FileType sh map <F9> :!bash "%"<Return>
au BufRead,BufNewFile *.thrift set filetype=thrift

" vim type
autocmd FileType vim map <buffer> <leader><space> :w!<cr>:source %<cr>
autocmd FileType vim map <F9> :source %<Return>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gui font
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 字体
if has("gui_running")
    "set guifont=Monaco:h10
    if has("win32")
        set guifont=Consolas:w8:h14
        "set guifont=Monaco:w5:h10
    elseif has("unix")
        "set guifont=YaHei\ Consolas\ Hybrid\ 10
        "set guifont=Monospace\ 10
        set guifont=Monaco\ for\ Powerline\ 14
    endif
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" status line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Always hide the statusline
set laststatus=2

function! CurDir()
    let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
    return curdir
endfunction

"Format the statusline
"set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
"let g:Powerline_symbols = 'unicode'
let g:Powerline_symbols = 'fancy'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
    """""""""""""""""""""""""""""
    " Mini Buf Explorer
    """""""""""""""""""""""""""""
    let g:miniBufExplMapWindowNavVim = 1
    "let g:miniBufExplMapWindowNavArrows = 1
    "let g:miniBufExplMapCTabSwitchBufs = 1
    let g:miniBufExplModSelTarget = 1
    let g:miniBufExplorerMoreThanOne = 2
    let g:miniBufExplModSelTarget = 0
    let g:miniBufExplUseSingleClick = 1
    let g:miniBufExplMapWindowNavVim = 1
    let g:miniBufExplVSplit = 25
    let g:miniBufExplSplitBelow=1
 
    let g:bufExplorerSortBy = "name"
 
    autocmd BufRead,BufNew :call UMiniBufExplorer
    map <C-F10> :MiniBufExplorer<Return>
    """"""""""""""""""""""""""""""
    " VimWiki
    """"""""""""""""""""""""""""""
    " load vim_profile
    if has('unix')
        source ~/.vim/vim_profile.vim
    else
        source $VIM/vim_profile.vim
    endif

    let s:vimwiki_path_base = g:vimwiki_dir " in vim_profile.vim 
    let g:vimwiki_list = [{'path': s:vimwiki_path_base . '/wiki', 
                \ 'path_thml': s:vimwiki_path_base . '/html',
                \ 'html_header': s:vimwiki_path_base . '/html_header.tpl'}]    
    let g:vimwiki_table_auto_fmt = 0
    let g:vimwiki_CJK_length = 1
    let g:vimwiki_use_mouse = 0
    let g:vimwiki_camel_case = 0
    autocmd FileType vimwiki map <leader>x i★<Esc>
    "autocmd FileType vimwiki set wrap
    map <C-F9> :VimwikiIndex<Return>
    map <Leader>T :VimwikiTable<Return>

 
    """"""""""""""""""""""""""""""
    " TagList
    """"""""""""""""""""""""""""""
    if has("unix")
        let Tlist_Ctags_Cmd="/usr/bin/ctags"
    elseif has("win32 ")
        let Tlist_Ctags_Cmd="ctags.exe"
    endif
    let Tlist_Show_One_File=1
    let Tlist_Exit_OnlyWindow=1
    let Tlist_Use_Right_Window=1
    let Tlist_Auto_Open=0
    let Tlist_Exit_OnlyWindow=1
    "let Tlist_Auto_Highlight_Tag=0
 
    function! LoadTag(name)
        if a:name == "LUA"
            set tags=E:\Libs\C++\lua-5.1.4\tags
            let g:LookupFile_TagExpr = '"E:/Libs/C++/lua-5.1.4/tags"'
        elseif a:name == "QT"
            set tags=E:\Libs\C++\QtTEMP\src\tags
            let g:LookupFile_TagExpr = '"E:/Libs/C++/QtTEMP/src/tags"'
        endif
    endfunction


    """"""""""""""""""""""""""""""
    " python color schema
    """"""""""""""""""""""""""""""
    let g:python_highlight_all = 1
    let g:python_highlight_builtin_funcs = 1
    let g:python_highlight_exceptions = 1
    let g:python_highlight_builtin_objs = 1
    let g:python_highlight_string_formatting = 1



